import { Meteor } from 'meteor/meteor';
import Web3 from 'web3';

 // Connect to local ethereum test node
var web3 = new Web3();
web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

// Display the accounts on the ethereum test node
console.log(web3.eth.accounts);

Meteor.startup(() => {
  // code to run on server at startup

  // Add users if they don't exist.  Each user has their ethereum publicKey in
  // their profile
  if(Meteor.users.find().count() === 0) {
    console.log('creating users');
    Accounts.createUser({
      username : 'test',
      email : 'test@test.com',
      password : 'test',
      profile : {
        publicKey: '0x1d8a14344df5b8f96f659c965614f623df83d5e9' // web3.eth.accounts[1]
      }
    });
  }

  // Add patient if it doesn't already exist.  Each patient has an ethereum
  // publicKey
  if(Patients.find().count() === 0) {
    Patients.insert({
      name: 'JOHN^DOE',
      mrn: '1234',
      publicKey: '0xa53cfb5697f17b97e36db9eb76faa2d8868f0ecf'
    });
  }
});

Meteor.publish('Patients', function patientsPublication() {

  if(this.userId) {
    return Patients.find();
  }
});


function addAuditEntry(accessed, accessor) {
  console.log("Adding auditEntry to ethereum");

  web3.personal.unlockAccount(web3.eth.accounts[0], 'changeme');
  // NOTE: Unlocking an account requires geth to expose the personal API via
  // RPC which is a major security hole.  This is just the most convenient
  // for a prototype - the right way should be to sign the transaction
  // and submit it via sendRawTransaction

  // the following code was generated by the online solidity compiler for
  // the auditEntry.sol
  var _accessed = accessed;
  var _accessor = accessor;
  var _timeStamp = new Date().getTime() / 1000;
  var auditentryContract = web3.eth.contract([{"constant":true,"inputs":[],"name":"timeStamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"accessor","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"accessed","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"_accessed","type":"address"},{"name":"_accessor","type":"address"},{"name":"_timeStamp","type":"uint256"}],"payable":false,"type":"constructor"}]);
  var auditentry = auditentryContract.new(
     _accessed,
     _accessor,
     _timeStamp,
     {
       from: web3.eth.accounts[0],
       data: '0x60606040523461000057604051606080610329833981016040528080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003819055505b5050505b610213806101166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ab0df871461005f578063568576421461008257806388a1b381146100d15780638da5cb5b14610120575b610000565b346100005761006c61016f565b6040518082815260200191505060405180910390f35b346100005761008f610175565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34610000576100de61019b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b346100005761012d6101c1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582097c7b86527ffb56571f971c2c60d6c2e485353257bacfa274470dbf91a2ffad10029',
       gas: '4700000'
     }, function (e, contract){
      //console.log(e, contract);
      if (typeof contract.address !== 'undefined') {
           console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
      }
   });
}

Meteor.methods({
  patientViewed : function(patient) {
    console.log('patientViewed ', patient.mrn);
    // Add an auditEntry contract to ethereum with this user's public key and
    // the patient's public key
    addAuditEntry(patient.publicKey, Meteor.user().profile.publicKey)
  }
})
